"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _interactionContext = _interopRequireDefault(require("@atlaskit/interaction-context"));
var _colors = require("@atlaskit/theme/colors");
var _components = require("@atlaskit/theme/components");
var _constants = require("./constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @jsx jsx */

/**
 * Returns the appropriate circle stroke color.
 */
function getStrokeColor(_ref) {
  var mode = _ref.mode,
    appearance = _ref.appearance;
  if (mode === 'light') {
    return appearance === 'inherit' ? "var(--ds-icon-subtle, ".concat(_colors.N500, ")") : "var(--ds-icon-inverse, ".concat(_colors.N0, ")");
  }
  return appearance === 'inherit' ? "var(--ds-icon-subtle, ".concat(_colors.DN900, ")") : "var(--ds-icon-inverse, ".concat(_colors.DN500, ")");
}
var rotate = (0, _react2.keyframes)({
  to: {
    transform: 'rotate(360deg)'
  }
});
var rotateStyles = (0, _react2.css)({
  animation: "".concat(rotate, " 0.86s infinite"),
  animationTimingFunction: 'cubic-bezier(0.4, 0.15, 0.6, 0.85)',
  transformOrigin: 'center'
});

/**
 * There are three parts to the load in animation:
 * 1. Fade in
 * 2. Accelerated spin
 * 3. Stretch the spinner line
 */
var loadIn = (0, _react2.keyframes)({
  from: {
    transform: 'rotate(50deg)',
    opacity: 0,
    strokeDashoffset: 60
  },
  to: {
    transform: 'rotate(230deg)',
    opacity: 1,
    strokeDashoffset: 50
  }
});
var loadInStyles = (0, _react2.css)({
  animation: "".concat(loadIn, " 1s ease-in-out"),
  /**
   * When the animation completes, stay at the last frame of the animation.
   */
  animationFillMode: 'forwards',
  /**
   * We are going to animate this in.
   */
  opacity: 0
});
var wrapperStyles = (0, _react2.css)({
  display: 'inline-flex',
  /**
   * Align better inline with text.
   */
  verticalAlign: 'middle'
});
var circleStyles = (0, _react2.css)({
  fill: 'none',
  strokeDasharray: 60,
  strokeDashoffset: 'inherit',
  strokeLinecap: 'round',
  strokeWidth: 1.5,
  '@media screen and (forced-colors: active)': {
    filter: 'grayscale(100%)',
    stroke: 'CanvasText'
  }
});

/**
 * `useLayoutEffect` is being used in SSR safe form. On the server, this work doesnâ€™t need to run.
 * `useEffect` is used in-place, because `useEffect` is not run on the server and it matches types
 * which makes things simpler than doing an `isServer` check or a `null` check.
 *
 * @see https://hello.atlassian.net/wiki/spaces/DST/pages/2081696628/DSTDACI-010+-+Interaction+Tracing+hooks+in+DS+components
 */
var useLayoutEffect = typeof window === 'undefined' ? _react.useEffect : _react.useLayoutEffect;
var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(function Spinner(_ref2, ref) {
  var testId = _ref2.testId,
    _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'inherit' : _ref2$appearance,
    _ref2$delay = _ref2.delay,
    delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
    _ref2$size = _ref2.size,
    providedSize = _ref2$size === void 0 ? 'medium' : _ref2$size,
    interactionName = _ref2.interactionName;
  var size = typeof providedSize === 'number' ? providedSize : _constants.presetSizes[providedSize];
  var animationDelay = "".concat(delay, "ms");
  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
    mode = _useGlobalTheme.mode;
  var stroke = getStrokeColor({
    mode: mode,
    appearance: appearance
  });
  var context = (0, _react.useContext)(_interactionContext.default);
  useLayoutEffect(function () {
    if (context != null) {
      return context.hold(interactionName);
    }
  }, [context, interactionName]);

  /**
   * The Spinner animation uses a combination of two
   * css animations on two separate elements.
   */
  return (0, _react2.jsx)("span", {
    /**
     * This span exists to off-load animations from the circle element,
     * which were causing performance issues (style recalculations)
     * on Safari and older versions of Chrome.
     *
     * This can be removed and styles placed back on the circle element once
     * Safari fixes this bug and off-loads rendering to the GPU from the CPU.
     */
    css: [wrapperStyles, rotateStyles],
    "data-testid": testId && "".concat(testId, "-wrapper"),
    style: {
      animationDelay: animationDelay,
      width: size,
      height: size
    }
  }, (0, _react2.jsx)("svg", {
    height: size,
    width: size,
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg",
    "data-testid": testId,
    ref: ref,
    css: loadInStyles,
    style: {
      animationDelay: animationDelay
    }
  }, (0, _react2.jsx)("circle", {
    cx: "8",
    cy: "8",
    r: "7",
    css: circleStyles,
    style: {
      stroke: stroke
    }
  })));
}));
exports.default = _default;