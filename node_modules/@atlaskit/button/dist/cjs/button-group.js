"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ButtonGroup;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @jsx jsx */

var buttonGroupStyles = (0, _react2.css)({
  display: 'inline-flex',
  gap: "var(--ds-space-050, 4px)",
  '> *': {
    flex: '1 0 auto'
  }
});
function ButtonGroup(_ref) {
  var appearance = _ref.appearance,
    children = _ref.children;
  return (0, _react2.jsx)("div", {
    css: buttonGroupStyles
  }, _react.default.Children.map(_react.default.Children.toArray(children), function (child, idx) {
    if (!child) {
      return null;
    }
    return (0, _react2.jsx)(_react.Fragment, {
      key: idx
    }, appearance ?
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-clone-element
    _react.default.cloneElement(child, {
      appearance: appearance
    }) : child);
  }));
}