import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["onMouseDown", "onMouseUp"];
import React, { useCallback, useMemo, useState } from 'react';
import noop from '@atlaskit/ds-lib/noop';
import { useGlobalTheme } from '@atlaskit/theme/components';
import ButtonBase from './shared/button-base';
import { getCss } from './shared/css';
import getIsOnlySingleIcon from './shared/get-is-only-single-icon';
var isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
/**
 * __Button__
 *
 * A button triggers an event or action. They let users know what will happen next.
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
var Button = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Button(_ref, ref) {
  var _ref$onMouseDown = _ref.onMouseDown,
    providedOnMouseDown = _ref$onMouseDown === void 0 ? noop : _ref$onMouseDown,
    _ref$onMouseUp = _ref.onMouseUp,
    providedOnMouseUp = _ref$onMouseUp === void 0 ? noop : _ref$onMouseUp,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useGlobalTheme = useGlobalTheme(),
    mode = _useGlobalTheme.mode;
  var appearance = rest.appearance || 'default';
  var spacing = rest.spacing || 'default';
  var shouldFitContainer = Boolean(rest.shouldFitContainer);
  var isSelected = Boolean(rest.isSelected);
  var isOnlySingleIcon = getIsOnlySingleIcon(rest);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isActive = _useState2[0],
    setIsActive = _useState2[1];

  // Wrap onMouseDown / onMouseUp to manually trigger active state
  //  in Firefox
  var onMouseDown = useCallback(function (event) {
    providedOnMouseDown(event);
    if (isFirefox) {
      setIsActive(true);
    }
  }, [providedOnMouseDown, setIsActive]);
  var onMouseUp = useCallback(function (event) {
    providedOnMouseUp(event);
    if (isFirefox) {
      setIsActive(false);
    }
  }, [providedOnMouseUp, setIsActive]);
  var buttonCss = useMemo(function () {
    return getCss({
      appearance: appearance,
      spacing: spacing,
      mode: mode,
      isSelected: isSelected,
      shouldFitContainer: shouldFitContainer,
      isOnlySingleIcon: isOnlySingleIcon
    });
  }, [appearance, spacing, mode, isSelected, shouldFitContainer, isOnlySingleIcon]);
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, rest, {
    ref: ref,
    buttonCss: buttonCss
    // Due to how click events are set, we need to set active styles
    //  manually in Firefox and wrap onMouseDown/onMouseUp
    ,
    "data-firefox-is-active": isActive ? true : undefined,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp
  }));
}));

// Tools including enzyme rely on components having a display name
Button.displayName = 'Button';
export default Button;