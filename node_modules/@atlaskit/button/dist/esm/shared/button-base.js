import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["appearance", "buttonCss", "spacing", "autoFocus", "isDisabled", "shouldFitContainer", "isSelected", "iconBefore", "iconAfter", "children", "className", "href", "overlay", "tabIndex", "type", "onMouseDown", "onClick", "component", "testId", "interactionName", "analyticsContext"];
/** @jsx jsx */
import React, { useCallback, useContext, useEffect, useRef } from 'react';
import { css, jsx } from '@emotion/react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import noop from '@atlaskit/ds-lib/noop';
import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';
import FocusRing from '@atlaskit/focus-ring';
// eslint-disable-next-line no-duplicate-imports
import InteractionContext from '@atlaskit/interaction-context';
import { N500 } from '@atlaskit/theme/colors';
import blockEvents from './block-events';
import { getContentStyle, getFadingCss, getIconStyle, overlayCss } from './css';

// Disabled buttons will still publish events for nested elements in webkit.
// We are disabling pointer events on child elements so that
// the button will always be the target of events
// Note: firefox does not have this behaviour for child elements
var noPointerEventsOnChildrenCss = {
  '> *': {
    pointerEvents: 'none'
  }
};
export default /*#__PURE__*/React.forwardRef(function ButtonBase(props, ref) {
  var _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
    buttonCss = props.buttonCss,
    _props$spacing = props.spacing,
    spacing = _props$spacing === void 0 ? 'default' : _props$spacing,
    _props$autoFocus = props.autoFocus,
    autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$shouldFitConta = props.shouldFitContainer,
    shouldFitContainer = _props$shouldFitConta === void 0 ? false : _props$shouldFitConta,
    _props$isSelected = props.isSelected,
    isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
    iconBefore = props.iconBefore,
    iconAfter = props.iconAfter,
    children = props.children,
    className = props.className,
    href = props.href,
    overlay = props.overlay,
    _props$tabIndex = props.tabIndex,
    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
    _props$type = props.type,
    type = _props$type === void 0 ? !href ? 'button' : undefined : _props$type,
    _props$onMouseDown = props.onMouseDown,
    providedOnMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown,
    _props$onClick = props.onClick,
    providedOnClick = _props$onClick === void 0 ? noop : _props$onClick,
    _props$component = props.component,
    Component = _props$component === void 0 ? href ? 'a' : 'button' : _props$component,
    testId = props.testId,
    interactionName = props.interactionName,
    analyticsContext = props.analyticsContext,
    rest = _objectWithoutProperties(props, _excluded);
  var ourRef = useRef();
  var setRef = useCallback(function (node) {
    ourRef.current = node;
    if (ref == null) {
      return;
    }
    if (typeof ref === 'function') {
      ref(node);
      return;
    }

    // @ts-ignore
    ref.current = node;
  }, [ourRef, ref]);

  // Cross browser auto focusing is pretty broken, so we are doing it ourselves
  useAutoFocus(ourRef, autoFocus);
  var interactionContext = useContext(InteractionContext);
  var handleClick = useCallback(function (e, analyticsEvent) {
    interactionContext && interactionContext.tracePress(interactionName, e.timeStamp);
    providedOnClick(e, analyticsEvent);
  }, [providedOnClick, interactionContext, interactionName]);
  var onClick = usePlatformLeafEventHandler({
    fn: handleClick,
    action: 'clicked',
    componentName: 'button',
    packageName: "@atlaskit/button",
    packageVersion: "16.6.0",
    analyticsData: analyticsContext
  });

  // Button currently calls preventDefault, which is not standard button behaviour
  var onMouseDown = useCallback(function (event) {
    event.preventDefault();
    providedOnMouseDown(event);
  }, [providedOnMouseDown]);

  // Lose focus when becoming disabled (standard button behaviour)
  useEffect(function () {
    var el = ourRef.current;
    if (isDisabled && el && el === document.activeElement) {
      el.blur();
    }
  }, [isDisabled]);

  // we are 'disabling' input with a button when there is an overlay
  var hasOverlay = Boolean(overlay);
  var fadeCss = css(getFadingCss({
    hasOverlay: hasOverlay
  }));
  var isInteractive = !isDisabled && !hasOverlay;

  /**
   * HACK: Spinner needs to have different colours in the "new" tokens design compared to the old design.
   * For now, while we support both, these styles reach into Spinner when a theme is set, applies the right color.
   * Ticket to remove: https://product-fabric.atlassian.net/browse/DSP-2067
   */
  var spinnerHackCss = {};
  if (isSelected || isDisabled || appearance === 'warning') {
    spinnerHackCss = {
      '[data-theme] & circle': {
        stroke: "".concat(isSelected || isDisabled ? "var(--ds-icon-subtle, ".concat(N500, ")") : "var(--ds-icon-warning-inverse, ".concat(N500, ")"), " !important")
      }
    };
  }
  return jsx(FocusRing, null, jsx(Component, _extends({}, rest, {
    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],
    className: className,
    ref: setRef,
    onClick: onClick,
    onMouseDown: onMouseDown,
    disabled: isDisabled,
    href: isInteractive ? href : undefined
    // using undefined so that the property doesn't exist when false
    ,
    "data-has-overlay": hasOverlay ? true : undefined,
    "data-testid": testId,
    type: type
    // Adding a tab index so element is always focusable, even when not a <button> or <a>
    // Disabling focus via keyboard navigation when disabled
    // as this is standard button behaviour
    ,
    tabIndex: isDisabled ? -1 : tabIndex
  }, blockEvents({
    isInteractive: isInteractive
  })), iconBefore ? jsx("span", {
    css: [fadeCss, getIconStyle({
      spacing: spacing
    })]
  }, iconBefore) : null, children ? jsx("span", {
    css: [fadeCss, getContentStyle({
      spacing: spacing
    })]
  }, children) : null, iconAfter ? jsx("span", {
    css: [fadeCss, getIconStyle({
      spacing: spacing
    })]
  }, iconAfter) : null, overlay ? jsx("span", {
    css: [overlayCss, spinnerHackCss]
  }, overlay) : null));
});