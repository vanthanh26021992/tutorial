/**
 * This file contains the source of truth for themes and all associated meta data.
 */
/**
 * Themes: The internal identifier of a theme.
 * These ids are what the actual theme files/folders are called.
 * style-dictionary will attempt to locate these in the file-system.
 */
export declare type Themes = 'atlassian-light' | 'atlassian-dark' | 'atlassian-legacy-light' | 'atlassian-legacy-dark' | 'atlassian-shape' | 'atlassian-spacing' | 'atlassian-typography';
export declare type ThemeFileNames = Themes;
export declare type ThemeOverrides = 'atlassian-dark-iteration';
/**
 * Theme kinds: The type of theme.
 * Some themes are entirely focused on Color, whilst others are purely focused on spacing.
 * In the future other types may be introduced such as typography.
 */
export declare type ThemeKinds = 'color' | 'spacing' | 'typography' | 'shape';
/**
 * Theme modes: The general purpose of a theme.
 * This attr is used to apply the appropriate system-preference option
 * It may also be used as a selector for mode-specific overrides such as light/dark images.
 * The idea is there may exist many color themes, but every theme must either fit into light or dark.
 */
export declare const themeColorModes: readonly ["light", "dark", "auto"];
export declare type ThemeColorModes = typeof themeColorModes[number];
export declare type DataColorModes = Omit<ThemeColorModes, 'auto'>;
/**
 * Theme ids: The value that will be mounted to the DOM as a data attr
 * For example: `data-theme="light:light dark:dark spacing:spacing"
 *
 * These ids must be kebab case
 */
export declare const themeIds: readonly ["light", "dark", "legacy-light", "legacy-dark", "spacing", "typography", "shape"];
export declare type ThemeIds = typeof themeIds[number];
export declare type ThemeOverrideIds = 'dark-iteration';
/**
 * Theme to use a base. This will create the theme as
 * an extension with all token values marked as optional
 * to allow tokens to be overridden as required.
 */
export declare type ExtensionThemeId = ThemeIds;
/**
 * Palettes: The set of base tokens a given theme may be populated with.
 * For example: legacy light & dark themes use the "legacyPalette" containing colors from our
 * previous color set.
 */
export declare type Palettes = 'defaultPalette' | 'legacyPalette' | 'spacingScale' | 'shapePalette' | 'typographyPalette';
/**
 * ThemeConfig: the source of truth for all theme meta-data.
 * This object should be used whenever interfacing with themes.
 */
interface ThemeConfig {
    id: ThemeIds;
    displayName: string;
    palette: Palettes;
    attributes: ({
        type: 'color';
        mode: Exclude<ThemeColorModes, 'auto'>;
    } | {
        type: Extract<ThemeKinds, 'spacing' | 'typography' | 'shape'>;
    }) & {
        extends?: ExtensionThemeId;
    };
}
declare const themeConfig: Record<Themes, ThemeConfig>;
export declare const themeOverrideConfig: {
    'atlassian-dark-iteration': {
        id: string;
        displayName: string;
        palette: string;
        overrideTheme: string;
        attributes: {
            type: string;
            mode: string;
        };
    };
};
export default themeConfig;
