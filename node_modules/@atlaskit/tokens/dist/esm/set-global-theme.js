import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { bind } from 'bind-event-listener';
import noop from '@atlaskit/ds-lib/noop';
import { getBooleanFF } from '@atlaskit/platform-feature-flags';
import { COLOR_MODE_ATTRIBUTE, THEME_DATA_ATTRIBUTE } from './constants';
import { loadAndAppendThemeCss, loadThemeCss } from './utils/theme-loading';
import { themeObjectToString } from './utils/theme-state-transformer';
var defaultColorMode = 'light';
var isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;
var darkModeMediaQuery = '(prefers-color-scheme: dark)';
var darkModeMql = isMatchMediaAvailable && window.matchMedia(darkModeMediaQuery);
var unbindThemeChangeListener = noop;
var themeStateDefaults = {
  colorMode: 'auto',
  dark: 'dark',
  light: 'light',
  spacing: undefined,
  typography: undefined
};

/**
 * Updates the current theme when the system theme changes. Should be bound
 * to an event listener listening on the '(prefers-color-scheme: dark)' query
 * @param e The event representing a change in system theme.
 */
var checkNativeListener = function checkNativeListener(e) {
  var element = document.documentElement;
  element.setAttribute(COLOR_MODE_ATTRIBUTE, e.matches ? 'dark' : 'light');
};

/**
 * Sets the theme globally at runtime. This updates the `data-theme` and `data-color-mode` attributes on your page's <html> tag.
 *
 * @param {Object<string, string>} themeState The themes and color mode that should be applied.
 * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.
 * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.
 * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.
 * @param {string} themeState.spacing The spacing theme to be applied.
 * @param {string} themeState.typography The typography theme to be applied.
 *
 * @returns A Promise of an unbind function, that can be used to stop listening for changes to system theme.
 *
 * @example
 * ```
 * setGlobalTheme({colorMode: 'auto', light: 'light', dark: 'dark', spacing: 'spacing'});
 * ```
 */
var setGlobalTheme = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _ref2,
      _ref2$colorMode,
      colorMode,
      _ref2$dark,
      dark,
      _ref2$light,
      light,
      _ref2$spacing,
      spacing,
      _ref2$typography,
      typography,
      themePreferences,
      themeAttributes,
      _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref2 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, _ref2$colorMode = _ref2.colorMode, colorMode = _ref2$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref2$colorMode, _ref2$dark = _ref2.dark, dark = _ref2$dark === void 0 ? themeStateDefaults['dark'] : _ref2$dark, _ref2$light = _ref2.light, light = _ref2$light === void 0 ? themeStateDefaults['light'] : _ref2$light, _ref2$spacing = _ref2.spacing, spacing = _ref2$spacing === void 0 ? themeStateDefaults['spacing'] : _ref2$spacing, _ref2$typography = _ref2.typography, typography = _ref2$typography === void 0 ? themeStateDefaults['typography'] : _ref2$typography;
            // Dedupe list of themes to avoid race condition
            themePreferences = new Set([dark, light, spacing, typography]);
            if (getBooleanFF('design-system-team.dark-theme-iteration_dk1ln') && themePreferences.has('dark')) {
              themePreferences.add('dark-iteration');
            }
            _context2.next = 5;
            return Promise.all(_toConsumableArray(themePreferences).filter(function (themeId) {
              return themeId !== undefined;
            }).map( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(themeId) {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return loadAndAppendThemeCss(themeId);
                      case 2:
                        return _context.abrupt("return", _context.sent);
                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return function (_x) {
                return _ref3.apply(this, arguments);
              };
            }()));
          case 5:
            if (colorMode === 'auto' && darkModeMql) {
              colorMode = darkModeMql.matches ? 'dark' : 'light';
              // Add an event listener for changes to the system theme.
              // If the function exists, it will not be added again.
              unbindThemeChangeListener = bind(darkModeMql, {
                type: 'change',
                listener: checkNativeListener
              });
            } else {
              unbindThemeChangeListener();
            }
            themeAttributes = getThemeHtmlAttrs({
              colorMode: colorMode,
              dark: dark,
              light: light,
              spacing: spacing,
              typography: typography
            });
            Object.entries(themeAttributes).forEach(function (_ref4) {
              var _ref5 = _slicedToArray(_ref4, 2),
                key = _ref5[0],
                value = _ref5[1];
              document.documentElement.setAttribute(key, value);
            });
            return _context2.abrupt("return", unbindThemeChangeListener);
          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function setGlobalTheme() {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Takes an object containing theme preferences, and returns an array of objects for use in applying styles to the document head.
 * Only supplies the color themes necessary for initial render, based on the current themeState. I.e. if in light mode, dark mode themes are not returned.
 *
 * @param {Object<string, string>} themeState The themes and color mode that should be applied.
 * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.
 * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.
 * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.
 * @param {string} themeState.spacing The spacing theme to be applied.
 * @param {string} themeState.typography The typography theme to be applied.
 *
 * @returns A Promise of an object array, containing theme IDs, data-attributes to attach to the theme, and the theme CSS.
 * If an error is encountered while loading themes, the themes arrav will be emptv.
 */
export var getThemeStyles = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var _ref7,
      _ref7$colorMode,
      colorMode,
      _ref7$dark,
      dark,
      _ref7$light,
      light,
      _ref7$spacing,
      spacing,
      _ref7$typography,
      typography,
      themePreferences,
      results,
      _args4 = arguments;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _ref7 = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, _ref7$colorMode = _ref7.colorMode, colorMode = _ref7$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref7$colorMode, _ref7$dark = _ref7.dark, dark = _ref7$dark === void 0 ? themeStateDefaults['dark'] : _ref7$dark, _ref7$light = _ref7.light, light = _ref7$light === void 0 ? themeStateDefaults['light'] : _ref7$light, _ref7$spacing = _ref7.spacing, spacing = _ref7$spacing === void 0 ? themeStateDefaults['spacing'] : _ref7$spacing, _ref7$typography = _ref7.typography, typography = _ref7$typography === void 0 ? themeStateDefaults['typography'] : _ref7$typography;
            themePreferences = colorMode === 'auto' ? [light, dark] : [colorMode];
            [spacing, typography].forEach(function (themeId) {
              if (themeId) {
                themePreferences.push(themeId);
              }
            });
            if (getBooleanFF('design-system-team.dark-theme-iteration_dk1ln') && themePreferences.includes('dark')) {
              themePreferences.push('dark-iteration');
            }
            _context4.next = 6;
            return Promise.all(themePreferences.map( /*#__PURE__*/function () {
              var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(themeId) {
                var css;
                return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.prev = 0;
                        _context3.next = 3;
                        return loadThemeCss(themeId);
                      case 3:
                        css = _context3.sent;
                        return _context3.abrupt("return", {
                          id: themeId,
                          attrs: {
                            'data-theme': themeId
                          },
                          css: css
                        });
                      case 7:
                        _context3.prev = 7;
                        _context3.t0 = _context3["catch"](0);
                        return _context3.abrupt("return", undefined);
                      case 10:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, null, [[0, 7]]);
              }));
              return function (_x2) {
                return _ref8.apply(this, arguments);
              };
            }()));
          case 6:
            results = _context4.sent;
            return _context4.abrupt("return", results.filter(function (theme) {
              return theme !== undefined;
            }));
          case 8:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return function getThemeStyles() {
    return _ref6.apply(this, arguments);
  };
}();

/**
 * Server-side rendering utility. Generates the valid HTML attributes for a given theme.
 * Note: this utility does not handle automatic theme switching.
 *
 * @param {Object<string, string>} themeOptions - Theme options object
 * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.
 * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.
 * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.
 * @param {string} themeState.spacing The spacing theme to be applied.
 * @param {string} themeState.typography The typography theme to be applied.
 *
 * @returns {Object} Object of HTML attributes to be applied to the document root
 */
export var getThemeHtmlAttrs = function getThemeHtmlAttrs() {
  var _ref10;
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref9$colorMode = _ref9.colorMode,
    colorMode = _ref9$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref9$colorMode,
    _ref9$dark = _ref9.dark,
    dark = _ref9$dark === void 0 ? themeStateDefaults['dark'] : _ref9$dark,
    _ref9$light = _ref9.light,
    light = _ref9$light === void 0 ? themeStateDefaults['light'] : _ref9$light,
    _ref9$spacing = _ref9.spacing,
    spacing = _ref9$spacing === void 0 ? themeStateDefaults['spacing'] : _ref9$spacing,
    _ref9$typography = _ref9.typography,
    typography = _ref9$typography === void 0 ? themeStateDefaults['typography'] : _ref9$typography;
  var themePreferences = {
    dark: dark,
    light: light,
    spacing: spacing,
    typography: typography
  };
  var themeAttribute = themeObjectToString(themePreferences);
  return _ref10 = {}, _defineProperty(_ref10, THEME_DATA_ATTRIBUTE, themeAttribute), _defineProperty(_ref10, COLOR_MODE_ATTRIBUTE, colorMode === 'auto' ? defaultColorMode : colorMode), _ref10;
};

/**
 * Provides a script that, when executed before paint, sets the `data-color-mode` attribute based on the current system theme,
 * to enable SSR support for automatic theme switching, avoid a flash of un-themed content on first paint.
 *
 * @param {string} colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.
 *
 * @returns {string} A string to be added to the innerHTML of a script tag in the document head
 */
export var getSSRAutoScript = function getSSRAutoScript(colorMode) {
  return colorMode === 'auto' ? "(\n  () => {\n    try {\n      const mql = window.matchMedia('".concat(darkModeMediaQuery, "');\n      const colorMode = mql.matches ? 'dark' : 'light';\n      document.documentElement.setAttribute('").concat(COLOR_MODE_ATTRIBUTE, "', colorMode);\n    } catch (e) {}\n  }\n)()") : undefined;
};
export default setGlobalTheme;