import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { Component } from 'react';
import AnalyticsContext from './AnalyticsContext/LegacyAnalyticsContext';
/**
 *  @deprecated
 */
// eslint-disable-next-line @repo/internal/react/no-class-components
var AnalyticsErrorBoundary = /*#__PURE__*/function (_Component) {
  _inherits(AnalyticsErrorBoundary, _Component);
  var _super = _createSuper(AnalyticsErrorBoundary);
  function AnalyticsErrorBoundary(props) {
    var _this;
    _classCallCheck(this, AnalyticsErrorBoundary);
    _this = _super.call(this, props);
    _this.state = {
      hasError: false
    };
    return _this;
  }
  _createClass(AnalyticsErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      var onError = this.props.onError;
      onError && onError(error, info);
      this.setState({
        hasError: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        data = _this$props.data,
        children = _this$props.children,
        ErrorComponent = _this$props.ErrorComponent;
      var hasError = this.state.hasError;
      if (hasError) {
        return ErrorComponent ? /*#__PURE__*/React.createElement(AnalyticsContext, {
          data: data
        }, /*#__PURE__*/React.createElement(ErrorComponent, null)) : null;
      }
      return /*#__PURE__*/React.createElement(AnalyticsContext, {
        data: data
      }, children);
    }
  }]);
  return AnalyticsErrorBoundary;
}(Component);
export { AnalyticsErrorBoundary as default };