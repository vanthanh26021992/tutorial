"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeStyleMap = exports.getIconSize = exports.commonSVGStyles = void 0;
var _constants = require("../constants");
var _react = require("@emotion/react");
var commonSVGStyles = {
  overflow: 'hidden',
  pointerEvents: 'none',
  /**
   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
   * rule) and then override it with currentColor for the color changes to be picked up.
   */
  stop: {
    stopColor: 'currentColor'
  }
};
exports.commonSVGStyles = commonSVGStyles;
var smallStyles = (0, _react.css)(_constants.dimensions.small);
var mediumStyles = (0, _react.css)(_constants.dimensions.medium);
var largeStyles = (0, _react.css)(_constants.dimensions.large);
var xlargeStyles = (0, _react.css)(_constants.dimensions.xlarge);

// pre-built css style-size map
var sizeStyleMap = {
  small: smallStyles,
  medium: mediumStyles,
  large: largeStyles,
  xlarge: xlargeStyles
};

/**
 * Returns the width of the icon's parent span. This function has
 * special behaviour to deal with icon-file-type specifically.
 *
 * The reality is the SVG still has its own dimensions, so this is
 * a secondary fallback which in 95% of cases is not required.
 * It's only really being kept to maintain backward compatability.
 */
exports.sizeStyleMap = sizeStyleMap;
var getIconSize = function getIconSize(_ref) {
  var width = _ref.width,
    height = _ref.height,
    size = _ref.size;
  if (width && height) {
    return {
      width: width,
      height: height
    };
  }
  if (size) {
    return _constants.dimensions[size];
  }
  return undefined;
};
exports.getIconSize = getIconSize;