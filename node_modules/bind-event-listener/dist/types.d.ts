export declare type UnbindFn = () => void;
declare type ExtractEventTypeFromHandler<MaybeFn extends unknown> = MaybeFn extends (this: any, event: infer MaybeEvent) => any ? MaybeEvent extends Event ? MaybeEvent : Event : never;
declare type GetEventType<Target extends EventTarget, EventName extends string> = `on${EventName}` extends keyof Target ? ExtractEventTypeFromHandler<Target[`on${EventName}`]> : Event;
declare type ListenerObject<TEvent extends Event> = {
    handleEvent(this: ListenerObject<TEvent>, e: TEvent): void;
};
export declare type Listener<Target extends EventTarget, EventName extends string> = ListenerObject<GetEventType<Target, EventName>> | {
    (this: Target, e: GetEventType<Target, EventName>): void;
};
export declare type Binding<Target extends EventTarget = EventTarget, EventName extends string = string> = {
    type: EventName;
    listener: Listener<Target, EventName>;
    options?: boolean | AddEventListenerOptions;
};
export {};
